{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pacman/Desktop/nextjs/lib/auth.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useContext, createContext } from 'react';\nimport Router from 'next/router';\nimport firebase from './firebase';\nimport { createUser } from './db';\nconst authContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  const auth = useFirebaseAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useFirebaseAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const firestore = firebase.firestore();\n\n  const handleUser = async rawUser => {\n    // console.log('handleUser called', new Date(), rawUser);\n    if (rawUser) {\n      const user = await formatUser(rawUser);\n\n      const {\n        token\n      } = user,\n            userWithoutToken = _objectWithoutProperties(user, [\"token\"]);\n\n      createUser(user.uid, userWithoutToken);\n      setUser(user);\n      setLoading(false);\n      return user;\n    } else {\n      setUser(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const signupWithEmail = (email, password, firstName, lastName, redirect) => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n      firestore.collection('users').doc(response.user.uid).set({\n        first_name: firstName,\n        last_name: lastName\n      });\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signinWithEmail = (email, password, redirect) => {\n    setLoading(true);\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signinWithGitHub = redirect => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.GithubAuthProvider()).then(response => {\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signinWithTwitter = redirect => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.TwitterAuthProvider()).then(response => {\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signinWithGoogle = redirect => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(response => {\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => handleUser(false));\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onIdTokenChanged(handleUser);\n    return () => unsubscribe();\n  }, []); // useEffect(() => {\n  //   const interval = setInterval(async () => {\n  //     if (user) {\n  //       const token = await firebase\n  //         .auth()\n  //         .currentUser.getIdToken(/* forceRefresh */ true);\n  //       setUser(user);\n  //       console.log('refreshed token');\n  //     }\n  //   }, 30 * 60 * 1000 /*every 30min, assuming token expires every 1hr*/);\n  //   return () => clearInterval(interval);\n  // }, [user]); // needs to depend on user to have closure on a valid user object in callback fun\n\n  const getFreshToken = async () => {\n    console.log('getFreshToken called', new Date());\n    const currentUser = firebase.auth().currentUser;\n\n    if (currentUser) {\n      const token = await currentUser.getIdToken(false);\n      return `${token}`;\n    } else {\n      return '';\n    }\n  };\n\n  return {\n    user,\n    loading,\n    signinWithEmail,\n    signinWithGitHub,\n    signinWithTwitter,\n    signinWithGoogle,\n    signout,\n    getFreshToken,\n    signupWithEmail\n  };\n} // const getStripeRole = async () => {\n//   await firebase.auth().currentUser.getIdToken(true);\n//   const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n//   return decodedToken.claims.stripeRole || 'free';\n// };\n\n\nconst formatUser = async user => {\n  // const token = await user.getIdToken(/* forceRefresh */ true);\n  const decodedToken = await user.getIdTokenResult(\n  /*forceRefresh*/\n  true);\n  const {\n    token,\n    expirationTime\n  } = decodedToken; // console.log(token);\n\n  return {\n    uid: user.uid,\n    email: user.email,\n    name: user.displayName,\n    provider: user.providerData[0].providerId,\n    photoUrl: user.photoURL,\n    token,\n    expirationTime // stripeRole: await getStripeRole(),\n\n  };\n};","map":{"version":3,"sources":["/home/pacman/Desktop/nextjs/lib/auth.js"],"names":["React","useState","useEffect","useContext","createContext","Router","firebase","createUser","authContext","AuthProvider","children","auth","useFirebaseAuth","useAuth","user","setUser","loading","setLoading","firestore","handleUser","rawUser","formatUser","token","userWithoutToken","uid","signupWithEmail","email","password","firstName","lastName","redirect","createUserWithEmailAndPassword","then","response","collection","doc","set","first_name","last_name","push","signinWithEmail","signInWithEmailAndPassword","signinWithGitHub","signInWithPopup","GithubAuthProvider","signinWithTwitter","TwitterAuthProvider","signinWithGoogle","GoogleAuthProvider","signout","signOut","unsubscribe","onIdTokenChanged","getFreshToken","console","log","Date","currentUser","getIdToken","decodedToken","getIdTokenResult","expirationTime","name","displayName","provider","providerData","providerId","photoUrl","photoURL"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from 'react';\nimport Router from 'next/router';\nimport firebase from './firebase';\nimport { createUser } from './db';\n\nconst authContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const auth = useFirebaseAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useFirebaseAuth() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const firestore = firebase.firestore();\n\n  const handleUser = async (rawUser) => {\n    // console.log('handleUser called', new Date(), rawUser);\n    if (rawUser) {\n      const user = await formatUser(rawUser);\n      const { token, ...userWithoutToken } = user;\n\n      createUser(user.uid, userWithoutToken);\n      setUser(user);\n\n      setLoading(false);\n      return user;\n    } else {\n      setUser(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const signupWithEmail = (email, password, firstName, lastName, redirect) => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((response) => {\n        firestore.collection('users').doc(response.user.uid)\n        .set({\n          first_name: firstName,\n          last_name: lastName,\n        })\n        handleUser(response.user);\n    \n        if (redirect) {\n          Router.push(redirect);\n        }\n    });\n  }\n\n  const signinWithEmail = (email, password, redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((response) => {\n        handleUser(response.user);\n\n        if (redirect) {\n          Router.push(redirect);\n        }\n      });\n  };\n\n  const signinWithGitHub = (redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.GithubAuthProvider())\n      .then((response) => {\n        handleUser(response.user);\n\n        if (redirect) {\n          Router.push(redirect);\n        }\n      });\n  };\n\n  const signinWithTwitter = (redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.TwitterAuthProvider())\n      .then((response) => {\n        handleUser(response.user);\n\n        if (redirect) {\n          Router.push(redirect);\n        }\n      });\n  };\n\n  const signinWithGoogle = (redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n      .then((response) => {\n        handleUser(response.user);\n\n        if (redirect) {\n          Router.push(redirect);\n        }\n      });\n  };\n\n  const signout = () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => handleUser(false));\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onIdTokenChanged(handleUser);\n    return () => unsubscribe();\n  }, []);\n\n  // useEffect(() => {\n  //   const interval = setInterval(async () => {\n  //     if (user) {\n  //       const token = await firebase\n  //         .auth()\n  //         .currentUser.getIdToken(/* forceRefresh */ true);\n  //       setUser(user);\n  //       console.log('refreshed token');\n  //     }\n  //   }, 30 * 60 * 1000 /*every 30min, assuming token expires every 1hr*/);\n  //   return () => clearInterval(interval);\n  // }, [user]); // needs to depend on user to have closure on a valid user object in callback fun\n\n  const getFreshToken = async () => {\n    console.log('getFreshToken called', new Date());\n    const currentUser = firebase.auth().currentUser;\n    if (currentUser) {\n      const token = await currentUser.getIdToken(false);\n      return `${token}`;\n    } else {\n      return '';\n    }\n  };\n\n  return {\n    user,\n    loading,\n    signinWithEmail,\n    signinWithGitHub,\n    signinWithTwitter,\n    signinWithGoogle,\n    signout,\n    getFreshToken,\n    signupWithEmail\n  };\n}\n\n// const getStripeRole = async () => {\n//   await firebase.auth().currentUser.getIdToken(true);\n//   const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n//   return decodedToken.claims.stripeRole || 'free';\n// };\n\nconst formatUser = async (user) => {\n  // const token = await user.getIdToken(/* forceRefresh */ true);\n  const decodedToken = await user.getIdTokenResult(/*forceRefresh*/ true);\n  const { token, expirationTime } = decodedToken;\n  // console.log(token);\n  return {\n    uid: user.uid,\n    email: user.email,\n    name: user.displayName,\n    provider: user.providerData[0].providerId,\n    photoUrl: user.photoURL,\n    token,\n    expirationTime,\n    // stripeRole: await getStripeRole(),\n  };\n};"]},"metadata":{},"sourceType":"module"}