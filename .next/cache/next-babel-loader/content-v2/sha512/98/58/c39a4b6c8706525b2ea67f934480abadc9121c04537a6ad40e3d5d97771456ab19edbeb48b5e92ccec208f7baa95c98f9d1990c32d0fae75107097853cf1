{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { compareDesc, compareAsc, parseISO } from 'date-fns';\nimport axios from 'axios';\nimport firebase from './firebase';\nconst firestore = firebase.firestore();\nexport async function createUser(uid, data) {\n  return await firestore.collection('users').doc(uid).set(_objectSpread({\n    uid\n  }, data), {\n    merge: true\n  });\n}\nexport async function createSite(data) {\n  const site = firestore.collection('ghost_sites').doc(); // returns DocRef\n\n  await site.set(data); // returns Promise<void>, so we need to await\n\n  return site;\n}\nexport async function updateSite(siteId, data) {\n  const site = firestore.collection('ghost_sites').doc(siteId);\n  await site.set(data, {\n    merge: true\n  }); // returns Promise<void>, so we need to await\n\n  return site;\n}\nexport async function deleteSite(siteId, token) {\n  const resp = await axios.delete(`/api/auth/site/${siteId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return resp;\n}\nexport async function getSite(siteId) {\n  const doc = await firestore.collection('ghost_sites').doc(siteId).get();\n\n  const site = _objectSpread({\n    id: doc.id\n  }, doc.data());\n\n  return site;\n}","map":{"version":3,"sources":["/home/pacman/Desktop/nextjs/lib/db.js"],"names":["compareDesc","compareAsc","parseISO","axios","firebase","firestore","createUser","uid","data","collection","doc","set","merge","createSite","site","updateSite","siteId","deleteSite","token","resp","delete","headers","Authorization","getSite","get","id"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,QAAlC,QAAkD,UAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,MAAMC,SAAS,GAAGD,QAAQ,CAACC,SAAT,EAAlB;AAEA,OAAO,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,SAAO,MAAMH,SAAS,CACnBI,UADU,CACC,OADD,EAEVC,GAFU,CAENH,GAFM,EAGVI,GAHU;AAGJJ,IAAAA;AAHI,KAGIC,IAHJ,GAGY;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAHZ,CAAb;AAID;AAED,OAAO,eAAeC,UAAf,CAA0BL,IAA1B,EAAgC;AACrC,QAAMM,IAAI,GAAGT,SAAS,CAACI,UAAV,CAAqB,aAArB,EAAoCC,GAApC,EAAb,CADqC,CACmB;;AACxD,QAAMI,IAAI,CAACH,GAAL,CAASH,IAAT,CAAN,CAFqC,CAEf;;AACtB,SAAOM,IAAP;AACD;AAED,OAAO,eAAeC,UAAf,CAA0BC,MAA1B,EAAkCR,IAAlC,EAAwC;AAC7C,QAAMM,IAAI,GAAGT,SAAS,CAACI,UAAV,CAAqB,aAArB,EAAoCC,GAApC,CAAwCM,MAAxC,CAAb;AACA,QAAMF,IAAI,CAACH,GAAL,CAASH,IAAT,EAAe;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAAf,CAAN,CAF6C,CAEN;;AACvC,SAAOE,IAAP;AACD;AAED,OAAO,eAAeG,UAAf,CAA0BD,MAA1B,EAAkCE,KAAlC,EAAyC;AAC9C,QAAMC,IAAI,GAAG,MAAMhB,KAAK,CAACiB,MAAN,CAAc,kBAAiBJ,MAAO,EAAtC,EAAyC;AAC1DK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAG,UAASJ,KAAM;AAAjC;AADiD,GAAzC,CAAnB;AAGA,SAAOC,IAAP;AACD;AAED,OAAO,eAAeI,OAAf,CAAuBP,MAAvB,EAA+B;AACpC,QAAMN,GAAG,GAAG,MAAML,SAAS,CAACI,UAAV,CAAqB,aAArB,EAAoCC,GAApC,CAAwCM,MAAxC,EAAgDQ,GAAhD,EAAlB;;AACA,QAAMV,IAAI;AAAKW,IAAAA,EAAE,EAAEf,GAAG,CAACe;AAAb,KAAoBf,GAAG,CAACF,IAAJ,EAApB,CAAV;;AACA,SAAOM,IAAP;AACD","sourcesContent":["import { compareDesc, compareAsc, parseISO } from 'date-fns';\nimport axios from 'axios';\nimport firebase from './firebase';\nconst firestore = firebase.firestore();\n\nexport async function createUser(uid, data) {\n  return await firestore\n    .collection('users')\n    .doc(uid)\n    .set({ uid, ...data }, { merge: true });\n}\n\nexport async function createSite(data) {\n  const site = firestore.collection('ghost_sites').doc(); // returns DocRef\n  await site.set(data); // returns Promise<void>, so we need to await\n  return site;\n}\n\nexport async function updateSite(siteId, data) {\n  const site = firestore.collection('ghost_sites').doc(siteId);\n  await site.set(data, { merge: true }); // returns Promise<void>, so we need to await\n  return site;\n}\n\nexport async function deleteSite(siteId, token) {\n  const resp = await axios.delete(`/api/auth/site/${siteId}`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  return resp;\n}\n\nexport async function getSite(siteId) {\n  const doc = await firestore.collection('ghost_sites').doc(siteId).get();\n  const site = { id: doc.id, ...doc.data() };\n  return site;\n}"]},"metadata":{},"sourceType":"module"}