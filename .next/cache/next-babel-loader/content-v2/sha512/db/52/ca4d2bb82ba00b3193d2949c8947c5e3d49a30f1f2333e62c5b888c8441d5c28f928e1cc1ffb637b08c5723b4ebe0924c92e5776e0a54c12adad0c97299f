{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { useAuth } from './auth';\nimport firebase from './firebase';\nconst firestore = firebase.firestore();\nexport async function createUser(uid, data) {\n  return await firestore.collection('users').doc(uid).set(_objectSpread({\n    uid\n  }, data), {\n    merge: true\n  });\n}\nexport async function updateUser(uid, data) {\n  return await firestore.collection('users').doc(uid).set(_objectSpread({\n    uid\n  }, data), {\n    merge: true\n  });\n}\nexport async function getUserDetails() {\n  const {\n    user\n  } = useAuth();\n  return await firestore.collection('users').doc(user.uid).get();\n}","map":{"version":3,"sources":["/home/pacman/Desktop/nextjs/lib/db.js"],"names":["axios","useAuth","firebase","firestore","createUser","uid","data","collection","doc","set","merge","updateUser","getUserDetails","user","get"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,MAAMC,SAAS,GAAGD,QAAQ,CAACC,SAAT,EAAlB;AAEA,OAAO,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,SAAO,MAAMH,SAAS,CACnBI,UADU,CACC,OADD,EAEVC,GAFU,CAENH,GAFM,EAGVI,GAHU;AAGJJ,IAAAA;AAHI,KAGIC,IAHJ,GAGY;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAHZ,CAAb;AAID;AAED,OAAO,eAAeC,UAAf,CAA0BN,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,SAAO,MAAMH,SAAS,CACnBI,UADU,CACC,OADD,EAEVC,GAFU,CAENH,GAFM,EAGVI,GAHU;AAGJJ,IAAAA;AAHI,KAGIC,IAHJ,GAGY;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAHZ,CAAb;AAID;AAGD,OAAO,eAAeE,cAAf,GAAgC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAWZ,OAAO,EAAxB;AACA,SAAO,MAAME,SAAS,CACnBI,UADU,CACC,OADD,EAEVC,GAFU,CAENK,IAAI,CAACR,GAFC,EAGVS,GAHU,EAAb;AAID","sourcesContent":["import axios from 'axios';\nimport { useAuth } from './auth';\nimport firebase from './firebase';\nconst firestore = firebase.firestore();\n\nexport async function createUser(uid, data) {\n  return await firestore\n    .collection('users')\n    .doc(uid)\n    .set({ uid, ...data }, { merge: true });\n}\n\nexport async function updateUser(uid, data) {\n  return await firestore\n    .collection('users')\n    .doc(uid)\n    .set({ uid, ...data }, { merge: true });\n}\n\n\nexport async function getUserDetails() {\n  const { user } = useAuth();\n  return await firestore\n    .collection('users')\n    .doc(user.uid)\n    .get();\n}"]},"metadata":{},"sourceType":"module"}