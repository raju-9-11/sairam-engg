{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport { useSnackbar } from 'notistack';\nimport AlignItemsList from './listview';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport firebase from '../lib/firebase';\nimport Fuse from 'fuse.js';\nimport Button from '@material-ui/core/Button';\nimport { getFields, getSkills } from '../lib/db';\nimport { checkSkill } from '../lib/func';\nconst useStyles = makeStyles(theme => ({\n  text: {\n    width: '25vh'\n  },\n  root: {\n    marginTop: '6vh',\n    flexGrow: 1,\n    [theme.breakpoints.up('sm')]: {\n      [theme.breakpoints.down('md')]: {\n        paddingLeft: '20vh'\n      }\n    },\n    paddingBottom: '10vh',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  paper: {\n    height: '100%',\n    marginLeft: '4vh'\n  },\n  control: {\n    padding: theme.spacing(2)\n  },\n  form: {\n    paddingTop: '7vh',\n    paddingRight: '7vh'\n  },\n  button1: {\n    marginTop: '3vh',\n    width: '90%'\n  },\n  button: {\n    marginTop: '3vh'\n  },\n  box: {\n    padding: '10vh',\n    paddingTop: '25vh'\n  }\n}));\nexport default function Filter() {\n  const classes = useStyles(); // const [ cid, setCid ] = useState('');\n\n  const {\n    0: skills,\n    1: setSkills\n  } = useState([]);\n  const {\n    0: fields,\n    1: setFields\n  } = useState([]);\n  const {\n    0: foe,\n    1: setFoe\n  } = useState('---Select---');\n  const {\n    0: filtered,\n    1: setFiltered\n  } = useState([]);\n  const {\n    0: skill,\n    1: setSkill\n  } = useState('---Select---');\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    0: sp,\n    1: setSp\n  } = useState(0);\n  const {\n    0: fp,\n    1: setFp\n  } = useState(0);\n  const {\n    0: years,\n    1: setYears\n  } = useState(0);\n  const {\n    0: spError,\n    1: setSpError\n  } = useState(' ');\n  const {\n    0: fpError,\n    1: setFpError\n  } = useState('');\n  const {\n    0: skillError,\n    1: setSkillError\n  } = useState('');\n  const {\n    0: fieldError,\n    1: setFieldError\n  } = useState('');\n  const firestore = firebase.firestore();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const getFID = () => {\n    try {\n      return fields.find(element => element.name === foe).id || '';\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getSID = () => {\n    try {\n      return skills.find(element => element.name === skill).id || '';\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleGet = () => {\n    // setSkillError(checkSkill(skill));\n    // setFieldError(checkSkill(foe));\n    setFpError(fp > -1 && fp < 6 ? '' : 'Valid points(0-5)');\n    setSpError(sp > -1 && sp < 6 ? '' : 'Valid points(0-5)');\n\n    if (foe != '---Select---') {\n      if (fp < 0 || fp > 6) {\n        return;\n      }\n\n      const fid = getFID();\n      const fuse = new Fuse(users, {\n        includeScore: true,\n        useExtendedSearch: true,\n        keys: [`${fid}.points`]\n      });\n      const data = fuse.search(`=${fp}`);\n\n      if (skill != '---Select---') {\n        if (sp < 0 || sp > 6) {\n          return;\n        }\n\n        const sid = getSID();\n        const sfuse = new Fuse(data, {\n          includeScore: true,\n          useExtendedSearch: true,\n          keys: [`${sid}.points`]\n        });\n        const final = sfuse.search(`=${sp}`);\n\n        if (final.length < 1) {\n          enqueueSnackbar(\"No Users Available\");\n          setFiltered([]);\n        } else {\n          setFiltered(final);\n        }\n\n        return;\n      }\n\n      if (data.length < 1) {\n        enqueueSnackbar(\"No Users Available\");\n        setFiltered([]);\n      } else {\n        setFiltered(data);\n      }\n\n      return;\n    }\n\n    if (skill != '---Select---') {\n      if (sp < 0 || sp > 6) {\n        return;\n      }\n\n      const sid = getSID();\n      const sfuse = new Fuse(users, {\n        includeScore: true,\n        useExtendedSearch: true,\n        keys: [`${sid}.points`]\n      });\n      const final = sfuse.search(`=${sp}`);\n\n      if (final.length < 1) {\n        setFiltered([]);\n      } else {\n        setFiltered(final);\n      }\n\n      return;\n    }\n\n    enqueueSnackbar(\"Select a category to filter\");\n  };\n\n  const getData = useCallback(async () => {\n    getFields().then(response => {\n      var lst = [];\n      response.forEach(dat => {\n        lst.push(_objectSpread({\n          id: dat.id\n        }, dat.data()));\n      });\n      setFields(lst);\n    });\n    getSkills().then(response => {\n      var lst = [];\n      response.forEach(dat => {\n        lst.push(_objectSpread({\n          id: dat.id\n        }, dat.data()));\n      });\n      setSkills(lst);\n    });\n  });\n  useEffect(() => {\n    firestore.collection('users').get().then(response => {\n      var lst = [];\n      response.forEach(user => {\n        lst.push(user.data());\n      });\n      setUsers(lst);\n    });\n    getData();\n  }, []);\n\n  const handleFieldChange = event => {\n    setFoe(event.target.value);\n  };\n\n  const handleSkillChange = event => {\n    setSkill(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      container: true,\n      className: classes.root,\n      spacing: 2,\n      children: /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(Grid, {\n          container: true,\n          justify: \"center\",\n          spacing: 4,\n          children: [0, 1].map((value, index) => /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsx(Paper, {\n              className: classes.paper,\n              children: index == 0 ? /*#__PURE__*/_jsxs(Container, {\n                component: \"main\",\n                maxWidth: \"sm\",\n                className: classes.root,\n                children: [/*#__PURE__*/_jsx(CssBaseline, {}), /*#__PURE__*/_jsxs(Box, {\n                  className: classes.form,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    component: \"h1\",\n                    variant: \"h5\",\n                    children: \"Filter\"\n                  }), /*#__PURE__*/_jsx(Box, {\n                    component: \"form\",\n                    className: classes.button,\n                    noValidate: true,\n                    sx: {\n                      width: '100%',\n                      // Fix IE11 issue.\n                      mt: 3\n                    },\n                    children: /*#__PURE__*/_jsxs(Grid, {\n                      container: true,\n                      spacing: 5,\n                      children: [/*#__PURE__*/_jsx(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsxs(TextField, {\n                          select: true,\n                          fullWidth: true,\n                          label: \"Select a Field\",\n                          value: foe,\n                          onChange: handleFieldChange,\n                          error: fieldError != '',\n                          helperText: fieldError,\n                          variant: \"outlined\",\n                          children: [/*#__PURE__*/_jsx(MenuItem, {\n                            value: '---Select---',\n                            children: '---Select---'\n                          }, '12'), fields.map(option => /*#__PURE__*/_jsx(MenuItem, {\n                            value: option.name,\n                            children: option.name\n                          }, option.id))]\n                        })\n                      }), /*#__PURE__*/_jsx(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsx(TextField, {\n                          required: true,\n                          fullWidth: true,\n                          name: \"experience\",\n                          label: \"Years of Experience\",\n                          helperText: \"Enter the number of years\",\n                          value: years,\n                          onChange: Event => setYears(Event.target.value),\n                          id: \"exp\",\n                          type: \"number\",\n                          variant: \"outlined\"\n                        })\n                      }), /*#__PURE__*/_jsx(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsxs(TextField, {\n                          select: true,\n                          fullWidth: true,\n                          label: \"Select a Skill\",\n                          value: skill,\n                          onChange: handleSkillChange,\n                          error: skillError != '',\n                          helperText: skillError,\n                          variant: \"outlined\",\n                          children: [/*#__PURE__*/_jsx(MenuItem, {\n                            value: '---Select---',\n                            children: '---Select---'\n                          }, '0a2'), skills.map(option => /*#__PURE__*/_jsx(MenuItem, {\n                            value: option.name,\n                            children: option.name\n                          }, option.id))]\n                        })\n                      })]\n                    })\n                  })]\n                })]\n              }) : /*#__PURE__*/_jsxs(Container, {\n                component: \"main\",\n                maxWidth: \"sm\",\n                className: classes.root,\n                children: [/*#__PURE__*/_jsx(CssBaseline, {}), /*#__PURE__*/_jsxs(Box, {\n                  className: classes.form,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    component: \"h1\",\n                    variant: \"h5\",\n                    children: \"Parameters\"\n                  }), /*#__PURE__*/_jsx(Box, {\n                    className: classes.button,\n                    component: \"form\",\n                    noValidate: true,\n                    sx: {\n                      width: '100%',\n                      // Fix IE11 issue.\n                      mt: 3\n                    },\n                    children: /*#__PURE__*/_jsxs(Grid, {\n                      container: true,\n                      spacing: 5,\n                      children: [/*#__PURE__*/_jsx(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsx(TextField // className={classes.text}\n                        , {\n                          required: true,\n                          fullWidth: true,\n                          type: \"number\",\n                          value: fp,\n                          error: fpError != '',\n                          helperText: fpError,\n                          onChange: Event => setFp(Event.target.value) // inputProps={{ min: \"0\", max: \"5\", step: \"0.5\" }}\n                          ,\n                          name: \"foesp\",\n                          label: \"Field of expertise (Skill Points)\",\n                          id: \"foesp\",\n                          variant: \"outlined\"\n                        })\n                      }), /*#__PURE__*/_jsx(Grid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsx(TextField // className={classes.text}\n                        , {\n                          required: true,\n                          fullWidth: true,\n                          type: \"number\",\n                          value: sp,\n                          error: spError != '',\n                          helperText: spError,\n                          onChange: Event => setSp(Event.target.value) // inputProps={{ min: \"0\", max: \"5\", step: \"0.5\" }}\n                          ,\n                          name: \"skillsp\",\n                          label: \"Skill Set (Skill Points)\",\n                          id: \"skillspsp\",\n                          variant: \"outlined\"\n                        })\n                      })]\n                    })\n                  })]\n                }), /*#__PURE__*/_jsx(Button, {\n                  type: \"submit\",\n                  fullWidth: true,\n                  variant: \"contained\",\n                  sx: {\n                    mt: 3,\n                    mb: 2\n                  },\n                  className: classes.button1,\n                  onClick: handleGet,\n                  children: \"Get\"\n                })]\n              })\n            })\n          }, value))\n        })\n      })\n    }), filtered.length > 0 && /*#__PURE__*/_jsx(AlignItemsList, {\n      users: filtered\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}