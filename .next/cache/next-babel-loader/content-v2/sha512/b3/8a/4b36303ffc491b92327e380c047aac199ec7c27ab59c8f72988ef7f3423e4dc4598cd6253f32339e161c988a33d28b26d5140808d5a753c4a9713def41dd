{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pacman/Desktop/nextjs/lib/auth.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useContext, createContext } from 'react';\nimport Router from 'next/router';\nimport firebase from './firebase';\nimport { createUser } from './db';\nimport { useSnackbar } from 'notistack';\nconst authContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  const auth = useFirebaseAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useFirebaseAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const firestore = firebase.firestore();\n\n  const handleUser = async rawUser => {\n    // console.log('handleUser called', new Date(), rawUser);\n    if (rawUser) {\n      const user = await formatUser(rawUser);\n\n      const {\n        token\n      } = user,\n            userWithoutToken = _objectWithoutProperties(user, [\"token\"]);\n\n      createUser(user.uid, userWithoutToken);\n      setUser(user);\n      setLoading(false);\n      return user;\n    } else {\n      setUser(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const signupWithEmail = (email, password, firstName, type, lastName, cid, years, redirect) => {\n    setLoading(true);\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n      firestore.collection('users').doc(response.user.uid).set({\n        first_name: firstName,\n        last_name: lastName,\n        type: type,\n        cid: cid,\n        years: years\n      });\n      handleUser(response.user);\n      enqueueSnackbar(\"Registration successful (Set password for your account using forgot password )\", {\n        variant: 'success'\n      });\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    }).catch(err => {\n      enqueueSnackbar(err.message, {\n        variant: 'error'\n      });\n    });\n  };\n\n  const signinWithEmail = (email, password, redirect) => {\n    setLoading(true);\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      handleUser(response.user);\n      enqueueSnackbar(\"Welcome back\", {\n        variant: 'success'\n      });\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    }).catch(e => {\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n    });\n  };\n\n  const signinWithGoogle = redirect => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(response => {\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signout = () => {\n    Router.push('/signin');\n    return firebase.auth().signOut().then(() => {\n      handleUser(false);\n      enqueueSnackbar(\"User successfully logged out\", {\n        variant: 'success'\n      });\n    }).catch(e => {\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onIdTokenChanged(handleUser);\n    return () => unsubscribe();\n  }, []);\n\n  const getFreshToken = async () => {\n    console.log('getFreshToken called', new Date());\n    const currentUser = firebase.auth().currentUser;\n\n    if (currentUser) {\n      const token = await currentUser.getIdToken(false);\n      return `${token}`;\n    } else {\n      return '';\n    }\n  };\n\n  return {\n    user,\n    loading,\n    signinWithEmail,\n    signinWithGoogle,\n    signout,\n    getFreshToken,\n    signupWithEmail\n  };\n}\n\nconst formatUser = async user => {\n  // const token = await user.getIdToken(/* forceRefresh */ true);\n  const decodedToken = await user.getIdTokenResult(\n  /*forceRefresh*/\n  true);\n  const {\n    token,\n    expirationTime\n  } = decodedToken; // console.log(token);\n\n  return {\n    uid: user.uid,\n    email: user.email,\n    name: user.displayName,\n    provider: user.providerData[0].providerId,\n    photoUrl: user.photoURL,\n    emailVerified: user.emailVerified,\n    token,\n    expirationTime // stripeRole: await getStripeRole(),\n\n  };\n};","map":{"version":3,"sources":["/home/pacman/Desktop/nextjs/lib/auth.js"],"names":["React","useState","useEffect","useContext","createContext","Router","firebase","createUser","useSnackbar","authContext","AuthProvider","children","auth","useFirebaseAuth","useAuth","user","setUser","loading","setLoading","enqueueSnackbar","firestore","handleUser","rawUser","formatUser","token","userWithoutToken","uid","signupWithEmail","email","password","firstName","type","lastName","cid","years","redirect","createUserWithEmailAndPassword","then","response","collection","doc","set","first_name","last_name","variant","push","catch","err","message","signinWithEmail","signInWithEmailAndPassword","e","signinWithGoogle","signInWithPopup","GoogleAuthProvider","signout","signOut","unsubscribe","onIdTokenChanged","getFreshToken","console","log","Date","currentUser","getIdToken","decodedToken","getIdTokenResult","expirationTime","name","displayName","provider","providerData","providerId","photoUrl","photoURL","emailVerified"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from 'react';\nimport Router from 'next/router';\nimport firebase from './firebase';\nimport { createUser } from './db';\nimport { useSnackbar } from 'notistack';\n\nconst authContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const auth = useFirebaseAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useFirebaseAuth() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const firestore = firebase.firestore();\n\n  const handleUser = async (rawUser) => {\n    // console.log('handleUser called', new Date(), rawUser);\n    if (rawUser) {\n      const user = await formatUser(rawUser);\n      const { token, ...userWithoutToken } = user;\n\n      createUser(user.uid, userWithoutToken);\n      setUser(user);\n\n      setLoading(false);\n      return user;\n    } else {\n      setUser(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const signupWithEmail = (email, password, firstName, type, lastName, cid, years, redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((response) => {\n        firestore.collection('users').doc(response.user.uid)\n        .set({\n          first_name: firstName,\n          last_name: lastName,\n          type: type,\n          cid: cid,\n          years: years\n        })\n        handleUser(response.user);\n        enqueueSnackbar(\"Registration successful (Set password for your account using forgot password )\", { variant: 'success'})\n    \n        if (redirect) {\n          Router.push(redirect);\n        }\n    })\n    .catch((err) => {\n      enqueueSnackbar(err.message, {variant  :'error'})\n    });\n    \n  }\n\n  const signinWithEmail = (email, password, redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then((response) => {\n        handleUser(response.user);\n\n        enqueueSnackbar(\"Welcome back\", { variant: 'success'})\n        if (redirect) {\n          Router.push(redirect);\n        }\n      })\n      .catch((e)=>{\n        enqueueSnackbar(e.message, {variant  :'error'})\n      });\n  };\n\n\n  const signinWithGoogle = (redirect) => {\n    setLoading(true);\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n      .then((response) => {\n        handleUser(response.user);\n\n        if (redirect) {\n          Router.push(redirect);\n        }\n      });\n  };\n\n  const signout = () => {\n    Router.push('/signin')\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        handleUser(false)\n        enqueueSnackbar(\"User successfully logged out\", { variant: 'success'});\n      })\n      .catch((e)=>{\n        enqueueSnackbar(e.message, {variant  :'error'})\n      });\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onIdTokenChanged(handleUser);\n    return () => unsubscribe();\n  }, []);\n\n\n  const getFreshToken = async () => {\n    console.log('getFreshToken called', new Date());\n    const currentUser = firebase.auth().currentUser;\n    if (currentUser) {\n      const token = await currentUser.getIdToken(false);\n      return `${token}`;\n    } else {\n      return '';\n    }\n  };\n\n  return {\n    user,\n    loading,\n    signinWithEmail,\n    signinWithGoogle,\n    signout,\n    getFreshToken,\n    signupWithEmail\n  };\n}\n\n\nconst formatUser = async (user) => {\n  // const token = await user.getIdToken(/* forceRefresh */ true);\n  const decodedToken = await user.getIdTokenResult(/*forceRefresh*/ true);\n  const { token, expirationTime } = decodedToken;\n  // console.log(token);\n  return {\n    uid: user.uid,\n    email: user.email,\n    name: user.displayName,\n    provider: user.providerData[0].providerId,\n    photoUrl: user.photoURL,\n    emailVerified: user.emailVerified,\n    token,\n    expirationTime,\n    // stripeRole: await getStripeRole(),\n  };\n};"]},"metadata":{},"sourceType":"module"}