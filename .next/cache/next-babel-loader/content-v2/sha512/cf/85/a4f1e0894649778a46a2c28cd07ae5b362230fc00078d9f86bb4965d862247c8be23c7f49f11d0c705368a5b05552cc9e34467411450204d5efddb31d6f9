{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useContext, createContext } from 'react';\nimport Router from 'next/router';\nimport firebase from './firebase';\nimport { createUser } from './db';\nimport { useSnackbar } from 'notistack';\nconst authContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  const auth = useFirebaseAuth();\n  return /*#__PURE__*/_jsx(authContext.Provider, {\n    value: auth,\n    children: children\n  });\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useFirebaseAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const firestore = firebase.firestore();\n\n  const handleUser = async rawUser => {\n    // console.log('handleUser called', new Date(), rawUser);\n    if (rawUser) {\n      const user = await formatUser(rawUser);\n\n      const {\n        token\n      } = user,\n            userWithoutToken = _objectWithoutProperties(user, [\"token\"]);\n\n      createUser(user.uid, userWithoutToken);\n      setUser(user);\n      setLoading(false);\n      return user;\n    } else {\n      setUser(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const signupWithEmail = (email, password, firstName, type, lastName, cid, years, redirect) => {\n    setLoading(true);\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n      firestore.collection('users').doc(response.user.uid).set({\n        first_name: firstName,\n        last_name: lastName,\n        type: type,\n        cid: cid,\n        years: years\n      });\n      handleUser(response.user);\n      enqueueSnackbar(\"Registration successful (Set password for your account using reset password link in Login page)\", {\n        variant: 'success'\n      });\n      signout();\n      Router.push('/signin');\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    }).catch(err => {\n      enqueueSnackbar(err.message, {\n        variant: 'error'\n      });\n    });\n  };\n\n  const resetPassword = email => {\n    setLoading(true);\n    return firebase.auth().sendPasswordResetEmail(email).then(response => {\n      enqueueSnackbar('Email sucessfully sent to the registered mail', {\n        variant: 'success'\n      });\n    }).catch(err => {\n      enqueueSnackbar(err.message, {\n        variant: \"error\"\n      });\n    });\n  };\n\n  const signinWithEmail = (email, password, redirect) => {\n    setLoading(true);\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      handleUser(response.user);\n\n      if (response.user) {\n        firebase.firestore().collection('users').doc(response.user.uid).get().then(doc => {\n          let type = doc.data().type;\n\n          if (type === 0) {\n            Router.push('/dashboard');\n          }\n\n          if (type === 1) {\n            Router.push('/admin');\n          }\n        });\n      } else {\n        setType(null);\n      }\n\n      enqueueSnackbar(\"Welcome back\", {\n        variant: 'success'\n      });\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    }).catch(e => {\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n    });\n  };\n\n  const signinWithGoogle = redirect => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(response => {\n      handleUser(response.user);\n\n      if (redirect) {\n        Router.push(redirect);\n      }\n    });\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => {\n      handleUser(false);\n\n      if (user.emailVerified) {\n        enqueueSnackbar(\"User successfully logged out\", {\n          variant: 'success'\n        });\n        Router.push('/signin');\n      }\n    }).catch(e => {\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onIdTokenChanged(handleUser);\n    return () => unsubscribe();\n  }, []);\n\n  const getFreshToken = async () => {\n    console.log('getFreshToken called', new Date());\n    const currentUser = firebase.auth().currentUser;\n\n    if (currentUser) {\n      const token = await currentUser.getIdToken(false);\n      return `${token}`;\n    } else {\n      return '';\n    }\n  };\n\n  return {\n    user,\n    loading,\n    signinWithEmail,\n    signinWithGoogle,\n    signout,\n    resetPassword,\n    getFreshToken,\n    signupWithEmail\n  };\n}\n\nconst formatUser = async user => {\n  // const token = await user.getIdToken(/* forceRefresh */ true);\n  const decodedToken = await user.getIdTokenResult(\n  /*forceRefresh*/\n  true);\n  const {\n    token,\n    expirationTime\n  } = decodedToken; // console.log(token);\n\n  return {\n    uid: user.uid,\n    email: user.email,\n    name: user.displayName,\n    provider: user.providerData[0].providerId,\n    photoUrl: user.photoURL,\n    emailVerified: user.emailVerified,\n    token,\n    expirationTime // stripeRole: await getStripeRole(),\n\n  };\n};","map":null,"metadata":{},"sourceType":"module"}