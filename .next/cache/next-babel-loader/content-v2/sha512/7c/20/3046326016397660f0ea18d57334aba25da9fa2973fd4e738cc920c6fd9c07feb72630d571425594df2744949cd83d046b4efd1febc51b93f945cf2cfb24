{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport firebase from './firebase';\nconst firestore = firebase.firestore();\n\nconst signupWithEmail = (email, password, firstName, type, lastName, redirect) => {\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n    handleUser(response.user);\n\n    if (redirect) {\n      Router.push(redirect);\n    }\n  });\n};\n\nexport async function createUser(uid, data) {\n  return await firestore.collection('users').doc(response.user.uid).set({\n    first_name: firstName,\n    last_name: lastName,\n    type: type\n  }, {\n    merge: true\n  });\n}\nexport async function updateUser(uid, data) {\n  return await firestore.collection('users').doc(uid).set(_objectSpread({\n    uid\n  }, data), {\n    merge: true\n  });\n}","map":{"version":3,"sources":["/home/pacman/Desktop/nextjs/lib/db.js"],"names":["axios","firebase","firestore","signupWithEmail","email","password","firstName","type","lastName","redirect","auth","createUserWithEmailAndPassword","then","response","handleUser","user","Router","push","createUser","uid","data","collection","doc","set","first_name","last_name","merge","updateUser"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,MAAMC,SAAS,GAAGD,QAAQ,CAACC,SAAT,EAAlB;;AAGA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,IAA7B,EAAmCC,QAAnC,EAA6CC,QAA7C,KAA0D;AAChFR,EAAAA,QAAQ,CACLS,IADH,GAEGC,8BAFH,CAEkCP,KAFlC,EAEyCC,QAFzC,EAGGO,IAHH,CAGSC,QAAD,IAAc;AAClBC,IAAAA,UAAU,CAACD,QAAQ,CAACE,IAAV,CAAV;;AAEA,QAAIN,QAAJ,EAAc;AACZO,MAAAA,MAAM,CAACC,IAAP,CAAYR,QAAZ;AACD;AACJ,GATD;AAUD,CAXD;;AAaA,OAAO,eAAeS,UAAf,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,SAAO,MAAMlB,SAAS,CAACmB,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCT,QAAQ,CAACE,IAAT,CAAcI,GAAhD,EACZI,GADY,CACR;AACHC,IAAAA,UAAU,EAAElB,SADT;AAEHmB,IAAAA,SAAS,EAAEjB,QAFR;AAGHD,IAAAA,IAAI,EAAEA;AAHH,GADQ,EAKV;AAAEmB,IAAAA,KAAK,EAAE;AAAT,GALU,CAAb;AAMD;AAED,OAAO,eAAeC,UAAf,CAA0BR,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,SAAO,MAAMlB,SAAS,CACnBmB,UADU,CACC,OADD,EAEVC,GAFU,CAENH,GAFM,EAGVI,GAHU;AAGJJ,IAAAA;AAHI,KAGIC,IAHJ,GAGY;AAAEM,IAAAA,KAAK,EAAE;AAAT,GAHZ,CAAb;AAID","sourcesContent":["import axios from 'axios';\nimport firebase from './firebase';\nconst firestore = firebase.firestore();\n\n\nconst signupWithEmail = (email, password, firstName, type, lastName, redirect) => {\n  firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then((response) => {\n      handleUser(response.user);\n  \n      if (redirect) {\n        Router.push(redirect);\n      }\n  });\n}\n\nexport async function createUser(uid, data) {\n  return await firestore.collection('users').doc(response.user.uid)\n  .set({\n    first_name: firstName,\n    last_name: lastName,\n    type: type,\n  }, { merge: true });\n}\n\nexport async function updateUser(uid, data) {\n  return await firestore\n    .collection('users')\n    .doc(uid)\n    .set({ uid, ...data }, { merge: true });\n}\n"]},"metadata":{},"sourceType":"module"}